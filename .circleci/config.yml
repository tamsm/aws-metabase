# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0


references:

base_image: &base_image
  hashicorp/terraform:light

working_directory: &working_directory
  ~/project

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
#    BASH_ENV: /root/.bashrc
    TERRAFORM_ENV: ~/project/

repo_cache_key: &repo_cache_key
  aws-metabase-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd ~/project/

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd ~/project/
      terraform init

apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          cd ~/project/
          terraform init
          terraform apply --auto-approve

jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            cd ~/project/
            terraform init
            terraform fmt
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            cd ~/project/
            terraform plan

# an alias for apply_job
  apply:
    <<: *apply_job


  destroy:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: "Destruction of env"
          command: |
            cd ~/project/
            terraform state rm aws_s3_bucket.terraform_state aws_dynamodb_table.terraform_state_locks
            terraform destroy --auto-approve



workflows:
  build_and_push_image:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: metabase
          tag: latest

  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          requires:
            - build
      - apply:
          requires:
            - plan
      - hold:
          type: approval
          requires:
            - apply
      - destroy:
          requires:
            - hold